set nocompatible          "不要兼容vi
filetype off              "必须的设置：

let mapleader=","
let g:mapleader=","

"===================================================
" Vundle Settings
"===================================================
" use BundleInstall to install bundles

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

Bundle 'AutoClose'
let g:autoclose_on=0
nmap <leader>x <Plug>ToggleAutoCloseMappings

Bundle 'ctrlp.vim'
"Bundle 'ZenCoding.vim'
Bundle 'matchit.zip'
Bundle 'Tabular'
"Bundle 'Valloric/YouCompleteMe'
Bundle 'spiiph/vim-space'
Bundle 'trailing-whitespace'
"Bundle 'Tagbar'
"Bundle 'Syntastic'
"Bundle 'surround.vim'

"Bundle '_jsbeautify'
"nnoremap <leader>_ff :call g:Jsbeautify()<cr>

Bundle 'EasyMotion'
let g:EasyMotion_leader_key = '<leader><leader>'

Bundle 'The-NERD-tree'
"设置相对行号
nnoremap <leader>nt :NERDTree<cr>:set rnu<cr>
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.$','\~$']
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos=1

Bundle 'The-NERD-Commenter'
let NERDShutUp=1
map <c-h> ,c<space>

"Bundle 'UltiSnips'
"let g:UltiSnipsExpandTrigger="<c-j>"
"let g:UltiSnipsJumpForwardTrigger="<c-j>"
"let g:UltiSnipsJumpBackwardTrigger="<c-k>"

Bundle 'Lokaltog/vim-powerline'
"let g:Powerline_symbols='fancy'

"Indent Guides设置
Bundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size=4

Bundle 'AutoComplPop'
let g:acp_completeoptPreview=1

Bundle 'mbbill/fencview'
"let g:fencview_autodetect=1

"Bundle 'orenhe/pylint.vim'
Bundle 'Pydiction'
Bundle 'ervandew/supertab'
Bundle 'sontek/minibufexpl.vim'
"Bundle 'kevinw/pyflakes'

Bundle 'klen/python-mode'
" Disable pylint checking every save
let g:pymode_lint_write = 0
let g:pylint_onwrite=0

Bundle 'taglist.vim'
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
nnoremap <F2> :TlistToggle<cr>

Bundle 'cscope.vim'

"===================================================
" General
"===================================================

"放置在Bundle的设置后，防止意外BUG
filetype plugin indent on
syntax on

"set undofile   "无限undo
set history=10000
set swapfile
set directory=~/backup
set backup
set backupdir=~/backup

set modeline   " 允许被编辑的文件以注释的形式设置Vim选项
set autoread

set ignorecase
set smartcase
set incsearch
set hlsearch
set magic
set gdefault    " When on, the ":substitute" flag 'g' is default on.
set grepprg=grep\ -nH\ $*

set lazyredraw  " don't redraw while executing macros

"set whichwrap+=<,>,h,l,[,],b
set backspace=indent,eol,start
"set isk+=-     "将-连接符也设置为单词

set wildmenu
set wildignore=*.o,*~,*.pyc

"===================================================
" VIM user interface
"===================================================

let loaded_matchparen = 1
set showmatch
nnoremap % :let line=line(".")<cr>%:echo line(".") - line<cr>

set scrolloff=4
set hidden
set laststatus=2
set number
set numberwidth=4
"set relativenumber
"set ruler    " using powerline instead
set showcmd
set cmdheight=2
set scrolloff=3
set wrap

" no annoying sound on errors
set noerrorbells
set visualbell
set t_vb=
set tm=500
autocmd GUIEnter * set vb t_vb=
autocmd VimEnter * set vb t_vb=

"colorscheme elflord
"colorscheme torte
colorscheme desert
"colorscheme murphy
set background=dark
set guifont=Consolas:h9

if has("gui_running")
    set t_Co=256
    "设置隐藏gvim的菜单和工具栏 F8切换
    set guioptions-=m
    set guioptions-=T
    "去除左右两边的滚动条
    set guioptions-=r
    set guioptions-=L
    map <silent> <F8> :if &guioptions =~# 'T' <bar>
                \set guioptions-=T <bar>
                \set guioptions-=m <bar>
                \else <bar>
                \set guioptions+=T <bar>
                \set guioptions+=m <bar>
                \endif<cr>
endif

"--------------------------------------------------
" tab and indent
"--------------------------------------------------
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set autoindent
"set smartindent    " only for C and obsolete (replaced by 'cindent')
set cindent    " enable automatic C program indenting.

set fo+=mB
set linebreak

"--------------------------------------------------
" encoding settings 编码
"--------------------------------------------------

" the list of encodings considered when starting to edit an existing file.
set fileencodings=cp936,ucs-bom,utf-8,gb18030,big5,euc-jp,euc-kr,latin1

" fileencoding(fenc): for the file of this buffer.
" let Vim detects it automatically.
" to convert file encoding to utf-8 when saving file:
" :set fileencoding=utf8
" :w

if has("gui_running")
    " encoding: used inside Vim.
    set encoding=utf-8
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8
else
    " FIXME: the same as locale?
    set termencoding=cp936
    set encoding=cp936
endif

set nobomb

if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
    set ambiwidth=double
endif

set ffs=unix,dos,mac

"===================================================
" Key mappings
"===================================================
" avoid the cursor keys when recalling commands from history.
cnoremap <c-p> <up>
cnoremap <c-n> <down>

"--------------------------------------------------
" Visual mode related
"--------------------------------------------------
" pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f')<cr>
vnoremap <silent> # :call VisualSelection('b')<cr>
" vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<cr>
" search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<cr>

"--------------------------------------------------
" Insert mode related
"--------------------------------------------------
inoremap jj <esc>

"插入模式下移动
inoremap <m-j> <down>
inoremap <m-k> <up>
inoremap <m-h> <left>
inoremap <m-l> <right>
" <c-a> is used to repeat last entered text. override it.
inoremap <m-a> <home>
inoremap <m-e> <end>

" <c-j> insert newline
" <c-k>: to insert special characters. now use <c-\> instead
inoremap <c-\> <c-k>
" delete everything to the right of cursor
inoremap <c-k> <esc><right>C
"inoremap <c-k> <c-o>D
" <c-h> backspace
inoremap <c-l> <del>
" <c-t> indent current line
" <c-d> un-indent current line

" 模拟 Emacs 键绑定
inoremap <c-a> <home>
inoremap <c-e> <end>
nnoremap <c-e> <end>
inoremap <c-p> <up>
inoremap <c-n> <down>
inoremap <c-b> <left>
inoremap <c-f> <right>
inoremap <m-b> <c-o>b
inoremap <m-f> <c-o>w
"inoremap <c-u> <esc>d0cl
"inoremap <c-w> <esc>dbcl
" delete everything to the right of cursor
"inoremap <c-k> <esc><right>C
"inoremap <c-k> <c-o>D
" delete the next character: <del>
inoremap <c-d> <esc><right>s
" kill the next word
inoremap <m-d> <c-o>de

" to recover lost text, Esc to normal mode and undo
inoremap <c-h> <c-g>u<c-h>
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>
inoremap <del> <c-g>u<del>
inoremap <BS>  <c-g>u<BS>

" <c-z> undo, <c-y> redo
noremap <c-z> u
inoremap <c-z> <c-o>u
"noremap <c-y> <c-r>
"inoremap <c-y> <c-o><c-r>
inoremap <silent> <c-s> <esc>:w<cr>i
noremap <silent> <c-s> :w<cr>
nnoremap <leader>w :w!<cr>

"--------------------------------------------------

" managing windows
nnoremap <silent> [w <c-w>W
nnoremap <silent> ]w <c-w>w
nnoremap <silent> [W <c-w>t
nnoremap <silent> ]W <c-w>b
nnoremap <leader>wv <c-w>v<c-w>l
nnoremap <leader>ws <c-w>s
nnoremap <leader>wc <c-w>c
nnoremap <F4>       <c-w>c
nnoremap <leader>ww <c-w>w
nnoremap <leader>wo <c-w>o
nnoremap <leader>wj <c-w>j
nnoremap <leader>wk <c-w>k
nnoremap <leader>wh <c-w>h

" managing buffers
" https://github.com/tpope/vim-unimpaired
nnoremap <silent> [b :bprevious<cr>
nnoremap <silent> ]b :bnext<cr>
nnoremap <silent> [B :bfirst<cr>
nnoremap <silent> ]B :blast<cr>
" :only doesn't delete other buffers
"nnoremap <silent> <leader>bo  :only<cr>
nnoremap <silent> <leader>bo  :call BufOnly(0)<cr>
nnoremap <silent> <leader>boo :call BufOnly(1)<cr>
nnoremap <silent> <leader>bl  :buffers<cr>
nnoremap <silent> <leader>ls  :buffers<cr>
nnoremap <silent> <leader>bc  :BufClose<cr>
nnoremap <silent> <leader>bd  :bd<cr>
nnoremap <silent> <leader>bdd :bd!<cr>
nnoremap <silent> <leader>ba  :1,1000 bd!<cr>
nnoremap <silent> <leader>be  :edit <c-r>=expand("%:p:h")<cr>/

" managing tabs
nnoremap <silent> ]t gt
nnoremap <silent> [t gT
nnoremap <silent> [T :tabfirst<cr>
nnoremap <silent> ]T :tablast<cr>
nnoremap <silent> <leader>tn :tabnew<cr>
nnoremap <silent> <leader>tc :tabclose<cr>
nnoremap <silent> <leader>to :tabonly<cr>
nnoremap <silent> <leader>tm :tabmove
" open a new tab to edit files in the same directory
nnoremap <silent> <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

nnoremap <leader>cd :cd <c-r>=expand("%:p:h")<cr><cr>:pwd<cr>

" cope: quickfix
nnoremap <silent> <leader>cn :botright cope<cr>
nnoremap <silent> <leader>ce ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
nnoremap <silent> [c :cp<cr>
nnoremap <silent> ]c :cn<cr>
nnoremap <silent> [C :cfirst<cr>
nnoremap <silent> ]C :clast<cr>

"--------------------------------------------------

" 为方便复制，开启/关闭行号显示：
"nnoremap <F3> :set nonumber!<cr>:set foldcolumn=0<cr>

" treat long lines as break lines
nnoremap j gj
nnoremap k gk

" simplify regular expressions using 'very magic'
" make every following character except a-zA-Z0-9
" and '-' have special meaning.
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

"使用,v来选择刚刚复制的段落，这样可以用来缩进
nnoremap <leader>v v`]

nnoremap <silent> <leader><space> :noh<cr>
nnoremap <silent> <c-l> :<c-u>nohlsearch<cr><c-l>

"取消粘贴缩进
nmap <leader>p :set paste<cr>
nmap <leader>pp :set nopaste<cr>

" make copy and paste easier in Windows.
" the "anonymous" register is aliased to the * register using:
set clipboard=unnamed

"==================================================
" coding
"==================================================

" K: show document of method under cursor?

"--------------------------------------------------
" code completion
"--------------------------------------------------
" Ctrl-N, Ctrl-P
" <c-x><c-n> current buffer keywords
" <c-x><c-i> included file keywords
" <c-x><c-]> tags file keywords
" <c-x><c-k> directory lookup
" <c-x><c-l> whole line completion
" <c-x><c-f> filename completion
" <c-x><c-o> omni-completion

set completeopt+=longest,menu
" enable completion of words in the spelling dictionary
"set complete+=k

autocmd InsertLeave * if pumvisible() == 0|pclose|endif
inoremap <expr> <cr>       pumvisible() ? "\<c-y>" : "\<cr>"
inoremap <expr> <c-n>      pumvisible() ? "\<c-n>" : "\<down>"
inoremap <expr> <down>     pumvisible() ? "\<c-n>" : "\<down>"
inoremap <expr> <c-p>      pumvisible() ? "\<c-p>" : "\<up>"
inoremap <expr> <up>       pumvisible() ? "\<c-p>" : "\<up>"
inoremap <expr> <pagedown> pumvisible() ? "\<pagedown>\<c-p>\<c-n>" : "\<pagedown>"
inoremap <expr> <c-f>      pumvisible() ? "\<pagedown>\<c-p>\<c-n>" : "\<right>"
inoremap <expr> <pageup>   pumvisible() ? "\<pageup>\<c-p>\<c-n>" : "\<pageup>"
inoremap <expr> <c-b>      pumvisible() ? "\<pageup>\<c-p>\<c-n>" : "\<left>"

autocmd filetype python set omnifunc=pythoncomplete#Complete
autocmd filetype c      set omnifunc=ccomplete#Complete

autocmd filetype python call SetupPythonIDE()

function! SetupPythonIDE()
    " Pydiction
    "  use <Tab> to auto complete
    let g:pydiction_location='~/.vim/bundle/Pydiction/complete-dict'
    let g:pydiction_menu_height=20

    set foldmethod=indent

    "TODO: snippets, use snipmate

    let g:pyflakes_use_quickfix = 0

    " http://vim.wikia.com/wiki/Continue_omnicompletion_for_python_modules
    imap <silent> <expr> <buffer> <CR> pumvisible() ? "<CR><C-R>=(col('.')-1&&match(getline(line('.')), '\\.',
                \ col('.')-2) == col('.')-2)?\"\<lt>C-X>\<lt>C-O>\":\"\"<CR>"
                \ : "<CR>"

endfunction

"--------------------------------------------------
" code navigation
"--------------------------------------------------
" gd, gD, *, #, g*, g#
" [[, ]], %
" Ctrl-O, Ctrl-I

"--------------------------------------------------
" ctags: http://ctags.sourceforge.net/
"--------------------------------------------------
" ctags -R .
set tags+=../tags,../../tags,../../../tags
" Ctrl-], Ctrl-T: go to last match, g Ctrl-]: show all possible tags
nnoremap <c-]> g<c-]>
vnoremap <c-]> g<c-]>
nnoremap g<c-]> <c-]>
vnoremap g<c-]> <c-]>
" autocmd BufWritePost * call system("ctags -R")

" update tags automatically on file save
au! BufWritePost *.[ch] call Update_tags()
au! BufWritePost *.[ch]pp call Update_tags()
au! BufWritePost *.py call Update_tags()

" set up a preview window that works like
" SourceInsight's Reference window
" see vim doc 'windows.txt'
au! CursorHold *.[ch] nested call PreviewWord()
au! CursorHold *.[ch]pp nested call PreviewWord()
"au! CursorHold *.py nested call PreviewWord()
"au! CursorHold * nested call PreviewWord()
nnoremap <F3> :call PreviewWord()<cr>
nnoremap <c-F3> <c-w><c-]>
set updatetime=500

"--------------------------------------------------
" cscope: http://sourceforge.net/projects/mslk/
"--------------------------------------------------
let g:cscope_cmd = 'd:/bin/cscope/cscope.exe'
set cscopequickfix=s-,c-,d-,i-,t-,e-
set cscopetagorder=1
set cscopetag
set cscopeverbose

command! -nargs=0 Cscope execute "cs add " . expand("%:p:h") . "/cscope.out"
" build cscope database
nmap <F11> :!cscope -bvR *.h *.cpp *.py *.cs *.java *.hpp *.c<CR>
            \:cs reset<CR>
nmap <c-F11> :!dir /b/s *.c *.cpp *.h *.py *.hpp *.inc > cscope.files<cr>
            \:!cscope -b<cr>

" :CscopeGen /dir
" ,fs    find this C symbol
" ,fg    find this definition
" ,fd    find functions called by this function
" ,fc    find functions calling this function
" ,ft    find this text string
" ,fe    find this egrep pattern
" ,ff    find this file
" ,fi    find files #including this file
" ,l     toggle location list

"--------------------------------------------------
" code folding
"--------------------------------------------------
" za: toggle current folding
set foldmethod=syntax
" no folding by default
set foldlevel=99

"--------------------------------------------------
" compile and fix errors
"--------------------------------------------------
" show quickfix window on compilation errors
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

"==================================================
" autocmd
"==================================================

"自动载入配置文件不需要重启
"autocmd bufwritepost _vimrc source %

nnoremap <leader>rc :ed ~/_vimrc<cr>
nnoremap <leader>ss :so ~/_vimrc<cr>

autocmd bufwrite *.py :call DeleteTrailingWS()
autocmd bufwrite *.cpp :call DeleteTrailingWS()
autocmd bufwrite *.h :call DeleteTrailingWS()

" return to last edit position when opening files
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \     execute "normal! g`\"" |
            \ endif
" remember info about open buffers on close
set viminfo^=%

autocmd filetype text setlocal textwidth=78

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

function! DeleteTrailingWS()
    execute "normal mz"
    %s/\s\+$//ge
    execute "normal `z"
endfunction

" Don't close window, when deleting a buffer
command! BufClose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

" return the list of buffer numbers
function! BufList()
    redir => bufnames
    silent ls
    redir END
    let list = []
    for i in split(bufnames, "\n")
        let buf = split(i, ' ')
        call add(list, buf[0])
    endfor
    return list
endfunction

" delete all other buffers except the current one
function! BufOnly(force)
    let list = filter(BufList(), 'v:val != bufnr("%")')
    let bdcmd = a:force ? "bdelete! " : "bdelete "
    for buffer in list
        exec bdcmd . buffer
    endfor
endfunction

" pipe the output of a command into a new tab.
" example usage:
" :TabMessage highlight
function! TabMessage(cmd)
    redir => message
    silent execute a:cmd
    redir END
    tabnew
    silent put=message
    set nocompatible
endfunction
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)


function! Update_tags()
    " FIXME: may not work on Windows
    if filewritable("./tags")
        call system("rm tags; ctags -R")
    elseif filewritable("../tags")
        call system("cd ..; rm tags; ctags -R ")
    elseif filewritable("../../tags")
        call system("cd ../..; rm tags; ctags -R")
    endif
endfunction


function! PreviewWord()
    let w = expand("<cword>") " get the word under cursor
    if w =~ '\a'              " if the word contains a letter
        if &previewwindow         " don't do this in the preview window
            exe "silent! tag " . w
            return
        endif

        let winWidth = winwidth(0)
        exe 'normal mz'

        " Delete any existing highlight before showing another tag
        silent! wincmd P        " jump to preview window
        if &previewwindow       " if we really get there...
            match none            " delete existing highlight
            wincmd p              " back to old window
        endif

        " Try displaying a matching tag for the word under the cursor
        try
            if winWidth > 160
                exe "silent! vert ptag " . w
            else
                exe "silent! ptag " . w
            endif
        catch
            return
        endtry

        silent! wincmd P        " jump to preview window
        if &previewwindow       " if we really get there...
            if has("folding")
                silent! .foldopen    " don't want a closed fold
            endif
            call search("$", "b")  " to end of previous line
            let w = substitute(w, '\\', '\\\\', "")
            call search('\<\V' . w . '\>') " position cursor on match
            " Add a match highlight to the word at this position
            hi previewWord term=bold ctermbg=green guibg=lightblue
            exe 'match previewWord "\%' . line(".") . 'l\%' . col(".") . 'c\k*"'
            wincmd p              " back to old window
        endif

        exe 'silent! normal `z'
    endif
endfun


" FIXME: may not work on Windows
function! MakeSession()
    let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
    if (filewritable(b:sessiondir) != 2)
        exe 'silent !mkdir -p ' b:sessiondir
        redraw!
    endif
    let b:filename = b:sessiondir . '/session.vim'
    exe "mksession! " . b:filename
endfunction

function! LoadSession()
    let b:sessiondir  = $HOME . "/.vim/sessions" . getcwd()
    let b:sessionfile = b:sessiondir . "/session.vim"
    if (filereadable(b:sessionfile))
        exe 'source ' b:sessionfile
    else
        echo "No session loaded."
    endif
endfunction

"au VimEnter * :call LoadSession()
"au VimLeave * :call MakeSession()

